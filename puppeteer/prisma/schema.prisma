//See more https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  binaryTargets   = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  Course      Course[]
}

model Course {
  id                Int             @id @unique @default(autoincrement())
  title             String
  img_url           String
  video_url         String
  description       String?         @db.Text
  short_description String?
  vote              Int?
  during            String?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now())
  site_id           Int
  category_id       Int
  include           String?         @db.MediumText
  promo_code        String?
  price             Int?            @default(0)
  Category          Category        @relation(fields: [category_id], references: [id])
  Site              Site            @relation(fields: [site_id], references: [id])
  CourseComment     CourseComment[]
  CourseDetail      CourseDetail[]
  TopicCourse       TopicCourse[]

  @@index([category_id], map: "Course_category_id_fkey")
  @@index([site_id], map: "Course_site_id_fkey")
}

model CourseComment {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String?  @db.Text
  vote        Int?
  helpful     Int?     @db.TinyInt
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  course_id   Int?
  Course      Course?  @relation(fields: [course_id], references: [id])

  @@index([course_id], map: "CourseComment_course_id_fkey")
}

model CourseDetail {
  id                Int      @id @unique @default(autoincrement())
  title             String
  img_url           String
  video_url         String
  description       String?  @db.Text
  short_description String?
  during            String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  course_id         Int
  Course            Course   @relation(fields: [course_id], references: [id])

  @@index([course_id], map: "CourseDetail_course_id_fkey")
}

model Site {
  id         Int        @id @unique @default(autoincrement())
  site_name  String
  site_url   String
  keywords   String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  Course     Course[]
  SiteFile   SiteFile[]
}

model SiteFile {
  id         Int      @id @unique @default(autoincrement())
  file_url   String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  site_id    Int?
  Site       Site?    @relation(fields: [site_id], references: [id])

  @@index([site_id], map: "SiteFile_site_id_fkey")
}

model Topic {
  id          Int           @id @unique @default(autoincrement())
  title       String
  description String?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  TopicCourse TopicCourse[]
}

model TopicCourse {
  topic_id   Int
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  Course     Course   @relation(fields: [course_id], references: [id])
  Topic      Topic    @relation(fields: [topic_id], references: [id])

  @@id([topic_id, course_id])
  @@index([course_id], map: "TopicCourse_course_id_fkey")
}
